package gobinsec

// Vulnerability for a vulnerability
type Vulnerability struct {
	ID         string               // CVE ID
	References []string             // Reference URL
	Matchs     []VulnerabilityMatch // version matching
	Exposed    bool                 // tells if this vulnerability is exposed
	Ignored    bool                 // tells id this vulnerability is ignored
}

// NewVulnerability builds a vulnerability from NVD call result
func NewVulnerability(item Item) (*Vulnerability, error) {
	vulnerability := Vulnerability{
		ID: item.CVE.Metadata.ID,
	}
	for _, reference := range item.CVE.References.ReferenceData {
		vulnerability.References = append(vulnerability.References, reference.URL)
	}
	for _, node := range item.Configurations.Nodes {
		for _, match := range node.Match {
			if match.Vulnerable && (match.VersionStartExcluding != "" ||
				match.VersionStartIncluding != "" ||
				match.VersionEndExcluding != "" ||
				match.VersionEndIncluding != "") {
				vm, err := NewVersionMatch(match)
				if err != nil {
					return nil, err
				}
				vulnerability.Matchs = append(vulnerability.Matchs, *vm)
			}
		}
	}
	vulnerability.Ignored = config.IgnoreVulnerability(vulnerability.ID)
	return &vulnerability, nil
}

func (v *Vulnerability) IsExposed(version Version) bool {
	for _, match := range v.Matchs {
		if match.Match(version) {
			v.Exposed = true
			return true
		}
	}
	return false
}

// VulnerabilityMatch are version constraints for vulnerability
type VulnerabilityMatch struct {
	VersionStartExcluding Version
	VersionStartIncluding Version
	VersionEndExcluding   Version
	VersionEndIncluding   Version
}

// NewVersionMatch return a version match
func NewVersionMatch(m Match) (*VulnerabilityMatch, error) {
	var vm VulnerabilityMatch
	if m.VersionStartExcluding != "" {
		vm.VersionStartExcluding = NewVersion(m.VersionStartExcluding)
	}
	if m.VersionStartIncluding != "" {
		vm.VersionStartIncluding = NewVersion(m.VersionStartIncluding)
	}
	if m.VersionEndExcluding != "" {
		vm.VersionEndExcluding = NewVersion(m.VersionEndExcluding)
	}
	if m.VersionEndIncluding != "" {
		vm.VersionEndIncluding = NewVersion(m.VersionEndIncluding)
	}
	return &vm, nil
}

// Match tells if given version matches (so that it is affected by vulnerability)
func (m *VulnerabilityMatch) Match(v Version) bool {
	if m.VersionStartExcluding != nil {
		r, err := m.VersionStartExcluding.Compare(v)
		if err != nil {
			return true
		}
		if r >= 0 {
			return false
		}
	}
	if m.VersionStartIncluding != nil {
		r, err := m.VersionStartIncluding.Compare(v)
		if err != nil {
			return true
		}
		if r > 0 {
			return false
		}
	}
	if m.VersionEndExcluding != nil {
		r, err := m.VersionEndExcluding.Compare(v)
		if err != nil {
			return true
		}
		if r <= 0 {
			return false
		}
	}
	if m.VersionEndIncluding != nil {
		r, err := m.VersionEndIncluding.Compare(v)
		if err != nil {
			return true
		}
		if r < 0 {
			return false
		}
	}
	return true
}
